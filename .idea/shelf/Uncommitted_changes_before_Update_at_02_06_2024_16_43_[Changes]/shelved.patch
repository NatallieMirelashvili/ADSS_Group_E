Index: dev/DomainLayer/AStock.java
===================================================================
diff --git a/dev/DomainLayer/AStock.java b/dev/DomainLayer/AStock.java
deleted file mode 100644
--- a/dev/DomainLayer/AStock.java	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
+++ /dev/null	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
@@ -1,45 +0,0 @@
-package DomainLayer;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-
-public class AStock {
-//    ***Fields***
-    protected HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock;
-    protected int amountIn;
-
-//    ***Constructor***
-            public AStock(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {
-                this.myStock = myStock;
-                this.amountIn = amountIn;
-            }
-
-
-
-//    ***Setters***
-    public void setMyStock(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock) {
-        this.myStock = myStock;
-    }
-
-    public void setAmountIn(int amountIn) {
-        this.amountIn = amountIn;
-    }
-
-
-
-//    ***Getters***
-    public int getAmountIn() {
-        return amountIn;
-    }
-    public HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> getMyStock() {
-        return myStock;
-    }
-
-    @Override
-    public String toString() {
-        return "AStock{" +
-                "myStock=" + myStock +
-                '}';
-    }
-
-}
Index: dev/DomainLayer/AReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/DomainLayer/AReport.java b/dev/DomainLayer/AReport.java
new file mode 100644
--- /dev/null	(date 1717332107656)
+++ b/dev/DomainLayer/AReport.java	(date 1717332107656)
@@ -0,0 +1,5 @@
+package DomainLayer;
+
+public class AReport {
+
+}
Index: dev/DomainLayer/Defective.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DomainLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class Defective extends AStock{\r\n\r\n    //    ***Constructor***\r\n    public Defective(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {\r\n        super(myStock, amountIn);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/DomainLayer/Defective.java b/dev/DomainLayer/Defective.java
--- a/dev/DomainLayer/Defective.java	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
+++ b/dev/DomainLayer/Defective.java	(date 1717332107647)
@@ -3,10 +3,14 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-public class Defective extends AStock{
+public class Defective extends AReport{
+    //    ***Fields***
+    HashMap<String,Product> products;
+    int amountDefectives;
 
     //    ***Constructor***
-    public Defective(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {
-        super(myStock, amountIn);
+    public Defective() {
+        products=null;
+        amountDefectives=0;
     }
 }
Index: dev/DomainLayer/Expired.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DomainLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class Expired extends AStock{\r\n\r\n    //    ***Constructor***\r\n\r\n    public Expired(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {\r\n        super(myStock, amountIn);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/DomainLayer/Expired.java b/dev/DomainLayer/Expired.java
--- a/dev/DomainLayer/Expired.java	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
+++ b/dev/DomainLayer/Expired.java	(date 1717332107544)
@@ -3,11 +3,12 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-public class Expired extends AStock{
+public class Expired extends AReport{
+
 
     //    ***Constructor***
 
-    public Expired(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {
+    public Expired() {
         super(myStock, amountIn);
     }
 }
Index: dev/DomainLayer/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DomainLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\n\r\npublic class Inventory extends AStock{\r\n\r\n    //    ***Constructor***\r\n    public Inventory(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {\r\n        super(myStock, amountIn);\r\n    }\r\n\r\n//  ***Setters***\r\n\r\n\r\n    //update sale price about products by category, sub category and size that given (all or some)\r\n    public void setSalePrice(String cat, String subCat , String size, Date from, Date to, double ratioSale) {\r\n        salePrice newSale = new salePrice(from, to, ratioSale);\r\n        if (!subCat.equals(\"0\") && !(size.equals(\"0\"))) { //have cat,subCat,size\r\n            setSaleOnProducts(runProductBySize(cat, subCat, size), newSale);\r\n        } else if (size.equals(\"0\")) { //have cat, subCat\r\n            setSaleOnProducts(runProductBySubCat(cat, subCat), newSale);\r\n        } else { //have cat\r\n            setSaleOnProducts(runProductByCat(cat), newSale);\r\n        }\r\n    }\r\n\r\n    //help function-update sale price about list of products\r\n    public void setSaleOnProducts (ArrayList<Product> products, salePrice newSale){\r\n        for (Product product : products)\r\n            product.setMySalePrice(newSale);\r\n    }\r\n\r\n    //update discount about products by category, sub category and size that given (all or some)\r\n    public void setDiscount(String cat, String subCat , String size, double myDiscount, String myManufacturer) {\r\n        if (!subCat.equals(\"0\") && !(size.equals(\"0\"))) { //have cat,subCat,size\r\n            discountOnProducts(runProductBySize(cat, subCat, size), myDiscount,myManufacturer);\r\n        } else if (size.equals(\"0\")) { //have cat, subCat\r\n            discountOnProducts(runProductBySubCat(cat, subCat), myDiscount,myManufacturer);\r\n        } else { //have cat\r\n            discountOnProducts(runProductByCat(cat), myDiscount,myManufacturer);\r\n        }\r\n    }\r\n\r\n\r\n//    ***Running by category***\r\n\r\n\r\n    //return an array list of all products by category, sub category and size\r\n    public ArrayList<Product> runProductBySize (String cat, String subCat, String size) {\r\n        return myStock.get(cat).get(subCat).get(size);\r\n    }\r\n\r\n    //return an array list of all products by category and sub category\r\n    public ArrayList<Product> runProductBySubCat (String cat, String subCat) {\r\n        ArrayList<Product> productsRes=new ArrayList<>();\r\n        HashMap<String, ArrayList<Product>> products1 = myStock.get(cat).get(subCat);\r\n        for (String mySize : products1.keySet()) {\r\n            productsRes.addAll(runProductBySize (cat,subCat,mySize));\r\n        }\r\n        return productsRes;\r\n    }\r\n\r\n    //return an array list of all products by category\r\n    public ArrayList<Product> runProductByCat (String cat) {\r\n        ArrayList<Product> productsRes=new ArrayList<>();\r\n        HashMap<String, HashMap<String, ArrayList<Product>>> subCatToChange = myStock.get(cat);\r\n            for (String mySubCat : subCatToChange.keySet()) {\r\n                productsRes.addAll(runProductBySubCat (cat, mySubCat));\r\n            }\r\n            return productsRes;\r\n    }\r\n\r\n//    ***Help Functions***\r\n\r\n    //help function-update discount about list of products\r\n    public void discountOnProducts (ArrayList<Product> products, double discount, String manufacturer) {\r\n        for (Product product : products) {\r\n            if (product.getManuFactor().equals(manufacturer))\r\n                product.setDiscount(discount);\r\n        }\r\n    }\r\n\r\n\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/DomainLayer/Inventory.java b/dev/DomainLayer/Inventory.java
--- a/dev/DomainLayer/Inventory.java	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
+++ b/dev/DomainLayer/Inventory.java	(date 1717332107610)
@@ -4,14 +4,25 @@
 import java.util.Date;
 import java.util.HashMap;
 
-public class Inventory extends AStock{
+public class Inventory{
+
+    //    ***Fields***
+    private HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock;
+    private int amountIn;
 
     //    ***Constructor***
-    public Inventory(HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock, int amountIn) {
-        super(myStock, amountIn);
-    }
+    public Inventory() {
+            this.myStock = null;
+            this.amountIn = 0;
+        }
 
-//  ***Setters***
+    //    ***Getters***
+    public int getAmountIn() {
+        return amountIn;
+    }
+    public HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> getMyStock() {
+        return myStock;
+    }
 
 
     //update sale price about products by category, sub category and size that given (all or some)
Index: dev/ServiceLayer/StockController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ServiceLayer;\r\nimport DomainLayer.Inventory;\r\nimport DomainLayer.DataObject;\r\nimport DomainLayer.Product;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class StockController {\r\n//    Access to inventory, defective, expired\r\n    private static DataObject forCreatedStuff = new DataObject();\r\n\r\n    public static void createStockFromData(){\r\n//       At first, all items in inventory\r\n        HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock = new HashMap<>();;\r\n        Inventory itemsForSell = new Inventory(myStock, 0);\r\n        forCreatedStuff.setInventory(itemsForSell);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/ServiceLayer/StockController.java b/dev/ServiceLayer/StockController.java
--- a/dev/ServiceLayer/StockController.java	(revision 8d3a6ea158050704e5e3dcd439d56fe95abd8004)
+++ b/dev/ServiceLayer/StockController.java	(date 1717332107583)
@@ -7,13 +7,13 @@
 import java.util.HashMap;
 
 public class StockController {
-//    Access to inventory, defective, expired
-    private static DataObject forCreatedStuff = new DataObject();
-
-    public static void createStockFromData(){
-//       At first, all items in inventory
-        HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock = new HashMap<>();;
-        Inventory itemsForSell = new Inventory(myStock, 0);
-        forCreatedStuff.setInventory(itemsForSell);
-    }
+////    Access to inventory, defective, expired
+//    private static DataObject forCreatedStuff = new DataObject();
+//
+//    public static void createStockFromData(){
+////       At first, all items in inventory
+//        HashMap<String, HashMap<String, HashMap<String, ArrayList<Product>>>> myStock = new HashMap<>();;
+//        Inventory itemsForSell = new Inventory(myStock, 0);
+//        forCreatedStuff.setInventory(itemsForSell);
+//    }
 }
